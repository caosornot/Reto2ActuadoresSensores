FLASK BASICO
http://flask.pocoo.org/docs/0.12/quickstart/

Enrutamiento

    route() sirve para crear diferentes paginas, segun se requiera

        @app.route('/')             #route para pagina inicial
        def index():
            return 'Index Page'

        @app.route('/hello')        #route pagina hello
        def hello():
            return 'Hello, World'

Metodos HTTP

    Por defecto route() solo tiene habilitado get, pero con methods es posible especificar otros a usar

        from flask import request

        @app.route('/login', methods=['GET', 'POST'])
        def login():
            if request.method == 'POST':
                do_the_login()
            else:
                show_the_login_form()

    GET : El buscador le dice al servidor que quiere obtener informacion almacenada
    HEAD : El buscador le dice al servidor que quiere obtener solo el header de la pagina, no el contenido
    POST : El buscador le dice al servidor que quiere postear nueva informacion solo una vez
    PUT : El buscador le dice al servidor que quiere postear nueva informacion varias veces, sobreescribiendo valores
    DELETE : Eliminar la informacion de una localizacion dada

Rendering Templates

    Flask cuenta con Jinja 2 quien automaticamente convierte una pagina HTML a python flask

    Se usa render_template(). Solo es necesario ingresar el nombre de la plantila HTML y los argumentos
        from flask import render_template

        @app.route('/hello/')
        @app.route('/hello/<name>')
        def hello(name=None):
            return render_template('hello.html', name=name)

    Es importante la creacion del directorio o carpetas

        /application.py
        /templates
            /template.html

TUTORIAL DE FLASK BOOTSTRAP
https://www.thecodewolf.com/python-flask-web-development-flask-templates-and-flask-bootstrap-integration/

Codigo base de tutorial para renderizar pagina html simple.
    from flask import Flask, render_template

    app = Flask(__name__)

    @app.route('/')
    def index():
        return render_template('index.html')

    if __name__ == '__main__':
    app.run(debug=True)

TUTORIAL How To Deploy a Flask Application on an Ubuntu VPS 
https://www.digitalocean.com/community/tutorials/how-to-deploy-a-flask-application-on-an-ubuntu-vps

Se sigue los pasos del tutorial recomendado por el profesor para desplegar la aplicacion de flask de DigitalOcean

Archivo .conf realizado
	/etc/apache2/sites-available/FlaskApp.conf

	<VirtualHost *:80>
		        ServerName 165.227.197.35
		        ServerAdmin caosornot@eafit.edu.co
		        WSGIScriptAlias / /var/www/FlaskAppReto/FlaskAppReto.wsgi
		        <Directory /var/www/FlaskAppReto/FlaskAppReto/>
		                Order allow,deny
		                Allow from all
		        </Directory>
		        Alias /static /var/www/FlaskAppReto/FlaskAppReto/static
		        <Directory /var/www/FlaskAppReto/FlaskAppReto/static/>
		                Order allow,deny
		                Allow from all
		        </Directory>
		        ErrorLog ${APACHE_LOG_DIR}/error.log
		        LogLevel warn
		        CustomLog ${APACHE_LOG_DIR}/access.log combined
	</VirtualHost>

Archivo .wsgi realizado

	#!/usr/bin/python
	import sys
	import logging
	logging.basicConfig(stream=sys.stderr)
	sys.path.insert(0,"/var/www/FlaskAppReto/")

	from FlaskAppReto import app as application
	application.secret_key = 'Add your secret key'

LECTURA DE JSON EN FLASK

Consulte como realizar la lectura de los archivos enviados por Arduino en flask
El procedimiento lo obtuve de los siguientes links:
	https://stackoverflow.com/questions/20001229/how-to-get-posted-json-in-flask
	https://stackoverflow.com/questions/43218413/get-data-json-in-flask
	
De la información mostrada super que se requeria importar request jsonify para esto.

Como la base de datos ya se encontraba creada (siguiendo este tutorial https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database), modifique el codigo para obtener el valor del json y de una vez ingresarlo a la base de datos.

	@app.route("/temperatura/add_entry", methods=['POST'])   #Creacion de ruta con Method POST para recibir información
	def add_entry():
	    print("p1")
	    content = request.get_json()			#Lectura de archivo JSON
	    tempC = content.get('temp')				#Obtener valor de temperatura
	    print (tempC)
    	    u = RegTemp(temp = tempC)				#Se ingresa el valor a la base de datos	
	    print ("p3")
	    db.session.add(u)					#Adiciona contenido de BD
	    print ("p4")
            db.session.commit()					#Se envia contenido de BD
	    print("p5")
	    return jsonify(content)				#Se envia respuesta al emisor del JSON	

Para verificar el funcionamiento de este use la aplicacion de Google Chrome POSTMAN, siguiendo las instrucciones de https://www.getpostman.com/docs/v6/postman/sending_api_requests/requests, arme el mensaje JSON para enviarlo al servidor y la URL definida	165.227.197.35:5000/temperatura/add_entry

A partir de aca comence a solucionar errores que aparecian, como permisos de escritura en la base de datos,  https://stackoverflow.com/questions/21054245/attempt-to-write-a-readonly-database-django-w-selinux-error, con el comando chown "username" "file or directory", concedi los permisor para escritura de la base de datos.

Luego el problema fue un error al crear la base de datos, el valor de temp, le habia puest la caracteristica Unique=True, por lo que al enviar el mismo valor de temperatura dos veces, generaba error. Para esto debi cambiar el archivo FlaskAppReto/models.py eliminando esa caracteristica y posteriosmente debi cargar de nuevo la base de datos y actualizarla con  flask db migrate -m "comentario" y luego flask db upgrade.

Finalmente con esta modificaciones logre enviar el dato al servidor y guardarlo en la BD.


